
.text
.globl main
main:
	lw $s7, size 			# tamaño del la lista
	move $s1, $zero  		# contador
	move $s2, $zero  		# desplazador

loop1orden:
beq $t0, $s7, finloop1			#si el contador llega al num de tamaño de la lista
addi $t1, $zero, 0			#restablece el valor del contador interno

loop2orden:
sub $t4, $s7, $t0			#almacena los valores 
beq $t1, $t4, finloop2		#fin del segundo bucle si el contador alcanza los valores aamcenados en $t4
mul $s2, $t1, 4
lw $t2, lista($s2)			#carga A[i]
addi $s3, $s2, 4                        #carga el desplazador
lw $t3, lista($s3)			#carga A[i+1]
	
ble $t3, $t2, despues			#elemento mayor o igual a[i+1] < a[i]
		
move $t5, $t2				#almacena a[i] $t5(temporal)
move $t2, $t3				#a[i] almacena el valor de a[i+1]
move $t3, $t5				#a[i+1] almacena el valor de el temporal
			
sw $t2, lista($s2)
sw $t3, lista($s3)

despues:		
addi $t1, $t1, 1			#incrementa el contador de loop 2
j loop2orden					#salta al inicio de loop 2

finloop2:
addi $t0, $t0, 1			#incrementa el valor del contador de loop 1
j loop1orden				#vuelve al inicio de loop 1
	
finloop1:
move $s1, $zero  			# contador para poder mostrar en pantalla la lista ordenada
move $s2, $zero  			# desplazador de la lista para mostrarla  

mostrar:
beq $s1, $s7, final 			# si el contador llega al valor del tamaño sale de mostrar
lw $a0, lista($s2)  			# imprimir el valor que sigue en la lista
li $v0, 1
syscall
la $a0, es 				# imprime el espacio
li $v0, 4
syscall
addi $s1, $s1, 1  			# incrementa el valor del contador
addi $s2, $s2, 4  			# se desplaza al siguiente elemento de la matriz
j mostrar  				# vuelve al inicio de la función mostrar

final:

.data
size: .word 6
lista: 2, 0, 3, 6, 12, 5
es: .asciiz " "